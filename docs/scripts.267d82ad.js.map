{"version":3,"sources":["src/errorMessages.ts","src/scripts.ts"],"names":[],"mappings":";AA4CC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,wBAAA,EAAA,QAAA,mBAAA,EAvCM,MAAM,EAAyC,CACpD,CACE,KAAM,gBACN,QAAS,yCAEX,CACE,KAAM,uBACN,QAAS,yCAEX,CACE,KAAM,mBACN,QAAS,yCAEX,CACE,KAAM,kBACN,QAAS,yCAEX,CACE,KAAM,uBACN,QAAS,yCAEX,CACE,KAAM,8BACN,QAAS,yCAEX,CACE,KAAM,kBACN,QAAS,yCAEX,CACE,KAAM,wBACN,QAAS,0CAIP,SAAU,EAAwB,GAChC,MAAA,EAAe,EAAc,KAAM,GAAU,EAAM,OAAS,EAAI,MAClE,OAAA,EAAqB,EAAa,QAC/B,+BACR,QAAA,cAAA;;ACkBD,aA9DA,IAAA,EAAA,QAAA,mBA8DA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WA5DA,MAAM,EAA8B,SAAS,cAAc,UACrD,EAA6B,SAAS,cAAc,SACpD,EAAiC,SAAS,cAAc,iBAE9D,SAAS,EAAY,GACnB,EAAK,aAAc,EAAwB,EAAA,yBAAA,GAG7C,SAAe,IAoDf,OAAA,EAAA,UAAA,OAAA,EAAA,YA/CS,aAJe,UAAU,aAAa,oBACrB,OAAQ,GAA2B,eAAhB,EAAO,QAMpD,SAAS,EAA6B,GAC9B,MAAA,0EAGG,EAAO,4BAIT,OADU,SAAS,cAAc,yBAAyB,GAInE,SAAe,IAiCf,OAAA,EAAA,UAAA,OAAA,EAAA,kBAhCuB,UAAU,aAAa,aAAa,CACvD,OAAO,EACP,OAAO,IAET,QAAQ,IAAI,kBACN,MAAA,QAAgB,IACtB,QAAQ,MAAM,GAER,MAAA,EAAiB,EAAQ,IAAI,SAAU,GACpC,OAAA,UAAU,aAAa,aAAa,CACzC,OAAO,EACP,MAAO,CAAE,SAAU,CAAE,MAAO,EAAO,eAIjC,QAAgB,QAAQ,IAAI,GAAgB,MAAM,QAAQ,OAChE,QAAQ,IAAI,CAAE,QAAA,IAG4B,EAAQ,IAChD,GAGY,QAAS,GAAO,EAAY,OAAO,IAG3B,EAAY,iBAAiB,SACrC,QAAQ,CAAC,EAAI,KACzB,EAAG,UAAY,EAAQ,OAI3B,EAAY,iBAAiB,QAAS","file":"scripts.267d82ad.js","sourceRoot":"..","sourcesContent":["interface UserMediaErrorMessage {\n  name: string;\n  message: string;\n}\n\nexport const errorMessages: UserMediaErrorMessage[] = [\n  {\n    name: 'NotFoundError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'DevicesNotFoundError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'NotReadableError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'TrackStartError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'OverconstrainedError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'ConstraintNotSatisfiedError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'NotAllowedError',\n    message: 'Looks like we cant access your webcam',\n  },\n  {\n    name: 'PermissionDeniedError',\n    message: 'Looks like we cant access your webcam',\n  },\n];\n\nexport function getFriendlyErrorMessage(err: MediaStreamError): string {\n  const errorMessage = errorMessages.find((error) => error.name === err.name);\n  if (errorMessage) return errorMessage.message;\n  return 'Oops - something went wrong!';\n}\n","import { getFriendlyErrorMessage } from './errorMessages';\n\nconst videoHolder: HTMLDivElement = document.querySelector('.video');\nconst text: HTMLParagraphElement = document.querySelector('.text');\nconst startbutton: HTMLButtonElement = document.querySelector('.start-camera');\n\nfunction handleError(err: MediaStreamError) {\n  text.textContent = getFriendlyErrorMessage(err);\n}\n\nasync function getCameras() {\n  const devices = await navigator.mediaDevices.enumerateDevices();\n  const cameras = devices.filter((device) => device.kind === 'videoinput');\n  // .filter((device) => !device.label.includes('Camo'));\n  // camera 2\n  return cameras;\n}\n\nfunction createVideoElementFromCamera(camera: MediaDeviceInfo) {\n  const markup = `\n    <div class=\"camera\">\n      <video autoplay></video>\n      <p>${camera.label}</p>\n    </div>\n  `;\n  const fragment = document.createRange().createContextualFragment(markup);\n  return fragment;\n}\n\nasync function requestIntialAccess() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: true,\n  });\n  console.log('initial stream');\n  const cameras = await getCameras();\n  console.table(cameras);\n  // See how many streams we are allowed access to\n  const streamPromises = cameras.map(function (camera) {\n    return navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: { deviceId: { exact: camera.deviceId } },\n    });\n  });\n  // wait for access to ALL the streams\n  const streams = await Promise.all(streamPromises).catch(console.error);\n  console.log({ streams });\n\n  // Create video elements for each\n  const videoFragment: DocumentFragment[] = cameras.map(\n    createVideoElementFromCamera\n  );\n  // dump them into the DOM\n  videoFragment.forEach((el) => videoHolder.append(el));\n\n  // Assign the src media of each camera to the video elements\n  const videoElements = videoHolder.querySelectorAll('video');\n  videoElements.forEach((el, i) => {\n    el.srcObject = streams[i];\n  });\n}\n\nstartbutton.addEventListener('click', requestIntialAccess);\n"]}